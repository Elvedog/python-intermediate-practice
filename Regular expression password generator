import re
import secrets
import string

def generate_password(length=16, nums=1, special_chars=1, uppercase=1, lowercase=1):
    """
    Generates a random password with specified constraints.

    Parameters:
    - length: The total length of the password (default is 16 characters).
    - nums: The minimum number of digits required in the password (default is 1).
    - special_chars: The minimum number of special characters required (default is 1).
    - uppercase: The minimum number of uppercase letters required (default is 1).
    - lowercase: The minimum number of lowercase letters required (default is 1).

    Returns:
    - A randomly generated password as a string that meets the specified constraints.
    """

    # Define the possible characters for the password:
    # - letters: Includes both uppercase and lowercase letters
    # - digits: Includes numbers from 0 to 9
    # - symbols: Includes special characters (e.g., !, @, #, $, etc.)
    letters = string.ascii_letters  # 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
    digits = string.digits          # '0123456789'
    symbols = string.punctuation    # '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'

    # Combine all characters into one string
    all_characters = letters + digits + symbols

    while True:
        password = ''
        
        # Generate a password of the specified length using random choices
        for _ in range(length):
            password += secrets.choice(all_characters)

        # Define constraints to check:
        # - Each tuple in the constraints list consists of a required count (constraint)
        #   and a regex pattern to match the corresponding characters in the password.
        constraints = [
            (nums, r'\d'),                      # Check for digits
            (special_chars, fr'[{symbols}]'),   # Check for special characters
            (uppercase, r'[A-Z]'),              # Check for uppercase letters
            (lowercase, r'[a-z]')               # Check for lowercase letters
        ]

        # Check if the generated password meets all constraints:
        # - re.findall() returns all matches of the pattern in the password.
        # - The loop continues until a valid password is generated that meets all constraints.
        if all(
            constraint <= len(re.findall(pattern, password))
            for constraint, pattern in constraints
        ):
            break  # If the password meets all constraints, exit the loop

    return password  # Return the valid password

if __name__ == '__main__':
    # Generate a new password with default constraints and print it
    new_password = generate_password()
    print('Generated password:', new_password)
