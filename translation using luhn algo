def verify_card_number(card_number):
    sum_of_odd_digits = 0
    card_number_reversed = card_number[::-1] # if start and stop are omitted it goes from start to end by default -1 for reverse step (movement)
    odd_digits = card_number_reversed[::2] #skips 2 elements from the reversed cards starting from 0

    for digit in odd_digits:
        sum_of_odd_digits += int(digit)

    sum_of_even_digits = 0
    even_digits = card_number_reversed[1::2] #starts from elements 1 in reversed card number
    for digit in even_digits:
       
        #we are looking for  single digits not double digits so if > 10 we must add number/10 + remainder of number%10 to get
        
        number = int(digit) * 2
        if number >= 10:
            number = (number // 10) + (number % 10)
        sum_of_even_digits += number
    total = sum_of_odd_digits + sum_of_even_digits
    
#if the total sum is equal to 0 it is valid according to luhn algorithm 
    return total % 10 == 0

def main():
    card_number = '4111-1111-4555-11'
    card_translation = str.maketrans({'-': '', ' ': ''})
    translated_card_number = card_number.translate(card_translation)

    if verify_card_number(translated_card_number):
        print('VALID!')
    else:
        print('INVALID!')

main()
