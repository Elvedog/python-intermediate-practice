class Category:
    def __init__(self, name):
        self.name = name  # Name of the budget category
        self.ledger = []  # List to store ledger entries (transactions)

    def deposit(self, amount, description=""):
        """Adds a deposit to the ledger with the specified amount and optional description."""
        self.ledger.append({"amount": amount, "description": description})

    def withdraw(self, amount, description=""):
        """Adds a withdrawal to the ledger with the specified amount and description.
        The amount is stored as a negative number.
        """
        if self.check_funds(amount):
            self.ledger.append({"amount": -amount, "description": description})
            return True
        return False

    def get_balance(self):
        """Returns the current balance based on the deposits and withdrawals."""
        balance = 0
        for item in self.ledger:
            balance += item["amount"]
        return balance

    def transfer(self, amount, category):
        """Transfers a specified amount from this category to another category."""
        if self.check_funds(amount):
            self.withdraw(amount, f"Transfer to {category.name}")
            category.deposit(amount, f"Transfer from {self.name}")
            return True
        return False

    def check_funds(self, amount):
        """Checks if there are enough funds for a given amount."""
        return amount <= self.get_balance()

    def __str__(self):
        """Returns a string representation of the category."""
        output = self.name.center(30, "*") + "\n"
        for item in self.ledger:
            amount = f"{item['amount']:.2f}"
            description = item["description"][:23]
            output += f"{description:<23}{amount:>7}\n"
        output += f"Total: {self.get_balance():.2f}"
        return output

def create_spend_chart(categories):
    """Creates a bar chart showing the percentage of total spending for each category."""
    spendings = []
    total_spent = 0

    # Calculate the total spending and spending per category
    for category in categories:
        spending = 0
        for item in category.ledger:
            if item["amount"] < 0:
                spending += abs(item["amount"])
        spendings.append({"category": category.name, "spent": spending})
        total_spent += spending

    # Calculate the percentage spent per category
    for spending in spendings:
        spending["percent"] = int((spending["spent"] / total_spent) * 100)

    # Generate the bar chart
    chart = "Percentage spent by category\n"
    for i in range(100, -1, -10):
        chart += str(i).rjust(3) + "| "
        for spending in spendings:
            if spending["percent"] >= i:
                chart += "o  "
            else:
                chart += "   "
        chart += "\n"

    chart += "    -" + "---" * len(spendings) + "\n"

    # Find the longest category name to align the chart
    max_len = max(len(spending["category"]) for spending in spendings)
    for i in range(max_len):
        chart += "     "
        for spending in spendings:
            if i < len(spending["category"]):
                chart += spending["category"][i] + "  "
            else:
                chart += "   "
        chart += "\n"

    return chart.rstrip("\n")


# Example usage:
food = Category("Food")
food.deposit(1000, "initial deposit")
food.withdraw(150.5, "groceries")
food.withdraw(200, "restaurant and more food")

clothing = Category("Clothing")
clothing.deposit(500, "initial deposit")
clothing.withdraw(75, "new shirt")
clothing.withdraw(25, "new socks")

entertainment = Category("Entertainment")
entertainment.deposit(300, "initial deposit")
entertainment.withdraw(100, "concert tickets")

food.transfer(50, entertainment)

print(food)
print(clothing)
print(entertainment)

print(create_spend_chart([food, clothing, entertainment]))
