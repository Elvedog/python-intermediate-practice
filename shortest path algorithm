# Define a graph using a dictionary where each key is a node, 
# and the value is a list of tuples representing the adjacent nodes and the distance to them.
my_graph = {
    'A': [('B', 5), ('C', 3), ('E', 11)],
    'B': [('A', 5), ('C', 1), ('F', 2)],
    'C': [('A', 3), ('B', 1), ('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 9), ('F', 3)],
    'E': [('A', 11), ('C', 5), ('D', 9)],
    'F': [('B', 2), ('D', 3)]
}

# Function to find the shortest path in a graph from a starting node to a target node
def shortest_path(graph, start, target=''):
    # Create a list of all nodes in the graph to track unvisited nodes
    unvisited = list(graph)
    
    # Initialize the distances dictionary, setting the start node's distance to 0 and all other nodes to infinity
    distances = {node: 0 if node == start else float('inf') for node in graph}
    
    # Initialize the paths dictionary to store the path to each node, starting with an empty path for each node
    paths = {node: [] for node in graph}
    paths[start].append(start)  # Start path from the start node
    
    # While there are still unvisited nodes, continue the algorithm
    while unvisited:
        # Select the unvisited node with the smallest distance as the current node
        current = min(unvisited, key=distances.get)
        
        # Explore the neighbors (adjacent nodes) of the current node
        for node, distance in graph[current]:
            # If a shorter path to a neighboring node is found, update the distance and path
            if distance + distances[current] < distances[node]:
                distances[node] = distance + distances[current]
                
                # Update the path to this node by extending the path from the current node
                if paths[node] and paths[node][-1] == node:
                    paths[node] = paths[current][:]
                else:
                    paths[node].extend(paths[current])
                paths[node].append(node)
        
        # Mark the current node as visited by removing it from the unvisited list
        unvisited.remove(current)
    
    # If a specific target node is provided, print the shortest path and distance to that node
    # Otherwise, print the shortest paths to all nodes
    targets_to_print = [target] if target else graph
    for node in targets_to_print:
        if node == start:  # Skip the start node as its distance to itself is trivially 0
            continue
        print(f'\n{start}-{node} distance: {distances[node]}\nPath: {" -> ".join(paths[node])}')
    
    return distances, paths  # Return the distances and paths dictionaries for further use

# Example usage of the shortest_path function
# Find and print the shortest path from node 'A' to node 'F'
shortest_path(my_graph, 'A', 'F')

